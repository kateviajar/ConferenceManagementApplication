#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ConferenceDB")]
	public partial class BookingDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTimeTable(TimeTable instance);
    partial void UpdateTimeTable(TimeTable instance);
    partial void DeleteTimeTable(TimeTable instance);
    partial void InsertBookingTable(BookingTable instance);
    partial void UpdateBookingTable(BookingTable instance);
    partial void DeleteBookingTable(BookingTable instance);
    partial void InsertRoomTable(RoomTable instance);
    partial void UpdateRoomTable(RoomTable instance);
    partial void DeleteRoomTable(RoomTable instance);
    #endregion
		
		public BookingDataClassesDataContext() : 
				base(global::ConferenceManagement.Properties.Settings.Default.ConferenceDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BookingDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TimeTable> TimeTables
		{
			get
			{
				return this.GetTable<TimeTable>();
			}
		}
		
		public System.Data.Linq.Table<BookingTable> BookingTables
		{
			get
			{
				return this.GetTable<BookingTable>();
			}
		}
		
		public System.Data.Linq.Table<RoomTable> RoomTables
		{
			get
			{
				return this.GetTable<RoomTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeTable")]
	public partial class TimeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeId;
		
		private string _TimePeriod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeIdChanging(int value);
    partial void OnTimeIdChanged();
    partial void OnTimePeriodChanging(string value);
    partial void OnTimePeriodChanged();
    #endregion
		
		public TimeTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TimeId
		{
			get
			{
				return this._TimeId;
			}
			set
			{
				if ((this._TimeId != value))
				{
					this.OnTimeIdChanging(value);
					this.SendPropertyChanging();
					this._TimeId = value;
					this.SendPropertyChanged("TimeId");
					this.OnTimeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriod", DbType="VarChar(50)")]
		public string TimePeriod
		{
			get
			{
				return this._TimePeriod;
			}
			set
			{
				if ((this._TimePeriod != value))
				{
					this.OnTimePeriodChanging(value);
					this.SendPropertyChanging();
					this._TimePeriod = value;
					this.SendPropertyChanged("TimePeriod");
					this.OnTimePeriodChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookingTable")]
	public partial class BookingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingId;
		
		private int _RoomNumber;
		
		private string _BookingDate;
		
		private string _BookingTime;
		
		private string _Name;
		
		private string _CompanyName;
		
		private string _Email;
		
		private EntitySet<RoomTable> _RoomTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnRoomNumberChanging(int value);
    partial void OnRoomNumberChanged();
    partial void OnBookingDateChanging(string value);
    partial void OnBookingDateChanged();
    partial void OnBookingTimeChanging(string value);
    partial void OnBookingTimeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public BookingTable()
		{
			this._RoomTables = new EntitySet<RoomTable>(new Action<RoomTable>(this.attach_RoomTables), new Action<RoomTable>(this.detach_RoomTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumber", DbType="Int")]
		public int RoomNumber
		{
			get
			{
				return this._RoomNumber;
			}
			set
			{
				if ((this._RoomNumber != value))
				{
					this.OnRoomNumberChanging(value);
					this.SendPropertyChanging();
					this._RoomNumber = value;
					this.SendPropertyChanged("RoomNumber");
					this.OnRoomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingDate", DbType="VarChar(50)")]
		public string BookingDate
		{
			get
			{
				return this._BookingDate;
			}
			set
			{
				if ((this._BookingDate != value))
				{
					this.OnBookingDateChanging(value);
					this.SendPropertyChanging();
					this._BookingDate = value;
					this.SendPropertyChanged("BookingDate");
					this.OnBookingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingTime", DbType="VarChar(50)")]
		public string BookingTime
		{
			get
			{
				return this._BookingTime;
			}
			set
			{
				if ((this._BookingTime != value))
				{
					this.OnBookingTimeChanging(value);
					this.SendPropertyChanging();
					this._BookingTime = value;
					this.SendPropertyChanged("BookingTime");
					this.OnBookingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookingTable_RoomTable", Storage="_RoomTables", ThisKey="RoomNumber", OtherKey="RoomId")]
		public EntitySet<RoomTable> RoomTables
		{
			get
			{
				return this._RoomTables;
			}
			set
			{
				this._RoomTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomTables(RoomTable entity)
		{
			this.SendPropertyChanging();
			entity.BookingTable = this;
		}
		
		private void detach_RoomTables(RoomTable entity)
		{
			this.SendPropertyChanging();
			entity.BookingTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomTable")]
	public partial class RoomTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomId;
		
		private System.Nullable<int> _RoomSize;
		
		private string _Available;
		
		private EntityRef<BookingTable> _BookingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnRoomSizeChanging(System.Nullable<int> value);
    partial void OnRoomSizeChanged();
    partial void OnAvailableChanging(string value);
    partial void OnAvailableChanged();
    #endregion
		
		public RoomTable()
		{
			this._BookingTable = default(EntityRef<BookingTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._BookingTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSize", DbType="Int")]
		public System.Nullable<int> RoomSize
		{
			get
			{
				return this._RoomSize;
			}
			set
			{
				if ((this._RoomSize != value))
				{
					this.OnRoomSizeChanging(value);
					this.SendPropertyChanging();
					this._RoomSize = value;
					this.SendPropertyChanged("RoomSize");
					this.OnRoomSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookingTable_RoomTable", Storage="_BookingTable", ThisKey="RoomId", OtherKey="RoomNumber", IsForeignKey=true)]
		public BookingTable BookingTable
		{
			get
			{
				return this._BookingTable.Entity;
			}
			set
			{
				BookingTable previousValue = this._BookingTable.Entity;
				if (((previousValue != value) 
							|| (this._BookingTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookingTable.Entity = null;
						previousValue.RoomTables.Remove(this);
					}
					this._BookingTable.Entity = value;
					if ((value != null))
					{
						value.RoomTables.Add(this);
						this._RoomId = value.RoomNumber;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("BookingTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
